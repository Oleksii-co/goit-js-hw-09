{"mappings":"AAkFA,MAAMA,EAASC,SAASC,cAAc,SACtBD,SAASC,cAAc,kBACxBD,SAASC,cAAc,iBACrBD,SAASC,cAAc,mBAkBxC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IAEtBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAC1BA,EAAM,G,CAIb,SAASQ,GAAUT,SAAEA,EAAQC,MAAEA,IACvBS,QAAQC,IAAI,wCAAwCX,QAAeC,M,CAG3E,SAASW,GAAQZ,SAAEA,EAAQC,MAAEA,IAC1BS,QAAQC,IAAI,wBAAwBX,QAAeC,M,CAjCtDL,EAAOiB,iBAAiB,UAExB,SAA0BC,GACxBA,EAAIC,iBAEJ,MAAMC,OAAEA,EAAQf,MAAAgB,EAAKC,KAAEA,GAASJ,EAAIK,OAAOC,SAC3C,IAAIC,EAAeC,OAAOL,EAAMM,OAEhC,IAAK,IAAIC,EAAI,EAAGA,GAAKR,EAAOO,MAAOC,IACjCzB,EAAcyB,EAAGH,GACdI,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,KAAYQ,EAAU,C,SAAET,E,MAAUC,MACpDyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,KAAYW,EAAQ,C,SAAEZ,E,MAAUC,MACtDoB,GAAgBC,OAAOJ,EAAKK,M","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// const form = document.querySelector(\".form\")\n// let delay = document.getElementsByName(\"delay\");\n// const step = document.getElementsByName(\"step\");\n// const amount = document.getElementsByName(\"amount\");\n\n\n\n// form.addEventListener('submit', onSubmitBtnClick)\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n// function onSubmitBtnClick(evt) {\n//   evt.preventDefault();\n//     for (let position = 1; position <= amount.value; position += 1) {\n//       createPromise(position, delay.value)\n//         .then(({ position, delay }) => {\n//           console.log(`:white_check_mark: Fulfilled promise ${position} in ${delay}ms`);\n//         })\n//         .catch(({ position, delay }) => {\n//           console.log(`:x: Rejected promise ${position} in ${delay}ms`);\n//         })\n//       delay.value += step.value;\n//     }\n//   }\n\n\n\n// const submitBtn = document.querySelector('button');\n// const delay = document.querySelector('.delay');\n// const step = document.querySelector('.step');\n// const amount = document.querySelector('.amount');\n\n\n// submitBtn.addEventListener('click', onBtn);\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n// function onBtn(e) {\n//    e.preventDefault();\n//   for (let position = 1; position <= amount.value; position += 1) {\n//     createPromise(position, delay.value)\n//       .then(({ position, delay }) => {\n//         console.log(`:white_check_mark: Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         console.log(`:x: Rejected promise ${position} in ${delay}ms`);\n//       })\n//     delay.value += step.value;\n//   }\n// };\n\n\n\nconst formEl = document.querySelector('.form');\n const delayEl= document.querySelector('[name=\"delay\"]');\n const stepEl= document.querySelector('[name=\"step\"]');\n const amountEl= document.querySelector('[name=\"amount\"]');\n\nformEl.addEventListener('submit', onSubmitBtnClick);\n\nfunction onSubmitBtnClick(evt) {\n  evt.preventDefault();\n\n  const { amount, delay, step } = evt.target.elements;\n  let currentDelay = Number(delay.value);\n\n  for (let i = 1; i <= amount.value; i++) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => onSuccess({ position, delay }))\n      .catch(({ position, delay }) => onError({ position, delay }));\n    currentDelay += Number(step.value);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n\nfunction onSuccess({ position, delay }) {\n        console.log(`:white_check_mark: Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onError({ position, delay }) {\n   console.log(`:x: Rejected promise ${position} in ${delay}ms`);\n}"],"names":["$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$onSuccess","console","log","$47d4ff9957288465$var$onError","addEventListener","evt","preventDefault","amount","delay1","step","target","elements","currentDelay","Number","value","i","then","catch"],"version":3,"file":"03-promises.b25a766d.js.map"}