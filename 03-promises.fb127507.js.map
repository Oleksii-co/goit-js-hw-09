{"mappings":"YAkFA,IAAMA,EAASC,SAASC,cAAc,SACtBD,SAASC,cAAc,kBACxBD,SAASC,cAAc,iBACrBD,SAASC,cAAc,mBAkBxC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUC,UAEtBG,EAAO,CAAEJ,WAAUC,S,GAClBA,E,IAIP,SAASQ,EAAUC,G,IAAEV,EAAFU,EAAEV,SAAUC,EAAZS,EAAYT,MACvBU,QAAQC,IAAI,wCAAuDC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,CAGjF,SAASa,EAAQJ,G,IAAEV,EAAFU,EAAEV,SAAUC,EAAZS,EAAYT,MAC1BU,QAAQC,IAAI,wBAAuCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,CAjC5DL,EAAOmB,iBAAiB,UAExB,SAA0BC,GACxBA,EAAIC,iBAKJ,IAHA,IAAgCC,EAAAF,EAAIG,OAAOC,SAAnCC,EAAwBH,EAAxBG,OAAQC,EAAgBJ,EAAhBjB,MAAOsB,EAASL,EAATK,KACnBC,EAAeC,OAAOH,EAAMI,OAEvBC,EAAI,EAAGA,GAAKN,EAAOK,MAAOC,IACjC5B,EAAc4B,EAAGH,GACdI,MAAK,SAAAlB,G,OAAyBD,EAAU,CAAET,SAA1BU,EAARV,SAA4CC,MAA7BS,EAALT,O,IAClB4B,OAAM,SAAAnB,G,OAAyBI,EAAQ,CAAEd,SAAxBU,EAARV,SAA0CC,MAA3BS,EAALT,O,IACtBuB,GAAgBC,OAAOF,EAAKG,M","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// const form = document.querySelector(\".form\")\n// let delay = document.getElementsByName(\"delay\");\n// const step = document.getElementsByName(\"step\");\n// const amount = document.getElementsByName(\"amount\");\n\n\n\n// form.addEventListener('submit', onSubmitBtnClick)\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n// function onSubmitBtnClick(evt) {\n//   evt.preventDefault();\n//     for (let position = 1; position <= amount.value; position += 1) {\n//       createPromise(position, delay.value)\n//         .then(({ position, delay }) => {\n//           console.log(`:white_check_mark: Fulfilled promise ${position} in ${delay}ms`);\n//         })\n//         .catch(({ position, delay }) => {\n//           console.log(`:x: Rejected promise ${position} in ${delay}ms`);\n//         })\n//       delay.value += step.value;\n//     }\n//   }\n\n\n\n// const submitBtn = document.querySelector('button');\n// const delay = document.querySelector('.delay');\n// const step = document.querySelector('.step');\n// const amount = document.querySelector('.amount');\n\n\n// submitBtn.addEventListener('click', onBtn);\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n// function onBtn(e) {\n//    e.preventDefault();\n//   for (let position = 1; position <= amount.value; position += 1) {\n//     createPromise(position, delay.value)\n//       .then(({ position, delay }) => {\n//         console.log(`:white_check_mark: Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         console.log(`:x: Rejected promise ${position} in ${delay}ms`);\n//       })\n//     delay.value += step.value;\n//   }\n// };\n\n\n\nconst formEl = document.querySelector('.form');\n const delayEl= document.querySelector('[name=\"delay\"]');\n const stepEl= document.querySelector('[name=\"step\"]');\n const amountEl= document.querySelector('[name=\"amount\"]');\n\nformEl.addEventListener('submit', onSubmitBtnClick);\n\nfunction onSubmitBtnClick(evt) {\n  evt.preventDefault();\n\n  const { amount, delay, step } = evt.target.elements;\n  let currentDelay = Number(delay.value);\n\n  for (let i = 1; i <= amount.value; i++) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => onSuccess({ position, delay }))\n      .catch(({ position, delay }) => onError({ position, delay }));\n    currentDelay += Number(step.value);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n\nfunction onSuccess({ position, delay }) {\n        console.log(`:white_check_mark: Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onError({ position, delay }) {\n   console.log(`:x: Rejected promise ${position} in ${delay}ms`);\n}"],"names":["$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$onSuccess","param","console","log","concat","$ce04d3a99e08e73b$var$onError","addEventListener","evt","preventDefault","_elements","target","elements","amount","delay1","step","currentDelay","Number","value","i","then","catch"],"version":3,"file":"03-promises.fb127507.js.map"}